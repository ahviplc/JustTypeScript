{
  "compilerOptions": {
    "strict": true,
    // types option has been previously configured
    // 其“--types”编译选项也能够用来指定使用的声明文件。
    // 其“--typeRoots”编译选项配置的是含有声明文件的目录，
    // 而“--types”编译选项则配置的是具体的声明文件
    "types": [
      // add node as an option
      "node"
    ],
    // typeRoots option has been previously configured
    // 其“--typeRoots”编译选项用来设置声明文件的根目录。当配置了“--typeRoots”编译选项时，只有该选项指定的目录下的声明文件会被添加到编译文件列表，
    // 而“node_modules/@types”目录下的声明文件将不再被默认添加到编译文件列表.
    // “typeRoots”属性中的路径是相对于当前“tsconfig.json”配置文件的路径来进行解析的
    "typeRoots": [
      // add path to @types
      "node_modules/@types"
    ],
    // 编译输出目标 ES 版本
    "target": "ES5",
    // 采用的模块系统
    "module": "CommonJS",
    // UMD | esnext
    // 允许编译javascript文件
    "allowJs": true,
    // 在 .js文件中报告错误。与 --allowJs配合使用。
    "checkJs": true,
    "outDir": "lib-tsc",
    // 将每个文件作为单独的模块（与“ts.transpileModule”类似）。
    "isolatedModules": true,
    // 不生成输出文件。
    "noEmit": false,
    "listFiles": false,
    // 编译器是否输出编译文件列表
    // 在.tsx文件里支持JSX
    "jsx": "preserve",
    // 使用的JSX工厂函数
    "jsxFactory": "h",
    // 允许从没有设置默认导出的模块中默认导入
    "allowSyntheticDefaultImports": true,
    // 启用装饰器
    "experimentalDecorators": true,
    "strictFunctionTypes": false,
    // 如何处理模块
    "moduleResolution": "node",
    // 在表达式和声明上有隐含的any类型时报错
    "noImplicitAny": true,
    "lib": [
      "dom",
      "es5",
      "ScriptHost",
      "es6",
      "DOM.Iterable",
      "es7",
      "es2015.promise"
    ],
    "pretty": true,
    "sourceMap": false,
    "declaration": true
    // 编译生成ts声明文件
    "declarationMap": true
    // 编译生成ts声明文件对应map
  },
  // ts要编译的文件
  // "files": [],
  // ts编译包含的文件
  "include": [
    "src/**/*"
  ],
  // ts编译排除的文件
  // 排除 src/index.ts
  "exclude": [
    "src/index.ts"
  ]
}
